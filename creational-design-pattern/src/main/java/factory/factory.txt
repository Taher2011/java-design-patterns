The Factory Method Pattern is a creational design pattern that 
encapsulates object creation logic within a factory method, 
decoupling clients from directly instantiating concrete product objects.

It defines a product(FoodItem) through an interface or abstract class, 
with concrete products(Burger,Pizza,Sandwich) implementing this interface.
A factory(FoodFctory) interface or abstract class declares the factory method, 
which concrete factories(BurgerFctory,PizzaFctory,SandwichFctory) implement to create specific concrete products.

Clients interact with the factory(FoodFctory) to obtain product instances(Burger,Pizza,Sandwich), without needing to know the details of their creation.

This pattern promotes :
loose coupling by isolating object creation from client code, 
extensibility by allowing new products and factories to be added without modifying existing code, 
maintainability by centralizing creation logic.

It adheres to the :
SRP-> (Single Responsibility Principle), as each factory is responsible for creating a specific type of product,
OCP-> (Open/Closed Principle), as new products can be added by extending the product and factory hierarchy without altering existing code.